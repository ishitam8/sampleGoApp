# Docker image, Azure container registry and Azure kubernetes service
# Build a Docker image, push to a container registry and deploy to Azure kubernetes service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================

  # Update Azure.ResourceGroupName value with Azure resource group name.
  Azure.ResourceGroupName: 'VstsRG-ishitamehta-54d0'

  # Update Azure.ServiceConnectionId value with AzureRm service endpoint.
  Azure.ServiceConnectionId: 'ded9a0d3-8564-4b15-9973-10e1b0438c34'

  # Update Azure.Location value with Azure Location.
  Azure.Location: 'eastus'

  # Update ACR.Name value with ACR name. Please note ACR names should be all lower-case and alphanumeric only.
  ACR.Name: 'ishitamacr'

  # Update AKS.ClusterName value Azure kubernetes cluster name.
  AKS.ClusterName: 'ishitamAKS'
  
  # Docker Container port
  Container.Port: 80

  # ========================================================================
  #                           Optional variables 
  # ========================================================================

  ACR.RepositoryName: '$(ACR.Name)'
  ACR.ImageName: '$(ACR.Name):$(Build.BuildId)'
  ACR.FullName: '$(ACR.Name).azurecr.io'
  ACR.Sku: 'Standard'
  AKS.KubeDeploymentYaml: '$(System.DefaultWorkingDirectory)/KubeDeployment.yml' # Update AKS.KubeDeploymentYaml if you want to use deployment file from repo instead of generated file.
  AKS.DepoymentPort: '80'
  Azure.CreateResources: 'true' # Update Azure.CreateResources to false if you have already created resources like resource group, azure container registry and azure kubernetes cluster.
  System.Debug: 'false'

jobs:

- job: CreateResources
  displayName: Create resources
  condition: and(succeeded(), eq(variables['Azure.CreateResources'], 'true'))

  pool:
    name: Hosted Ubuntu 1604

  steps:
  - task: AzureCLI@1
    displayName: 'Create resources if required'
    inputs:
      connectedServiceNameARM: '$(Azure.ServiceConnectionId)'
      scriptLocation: inlineScript
      inlineScript: |
        #!/bin/bash
        RGExists=$(az group exists --name $(Azure.ResourceGroupName))
        echo "RG exists: $RGExists"
        if [ $RGExists = false ]
        then
          CREATED_RG=$(az group create --name $(Azure.ResourceGroupName) --location $(Azure.Location))
          echo "$CREATED_RG"
        fi
        CREATE_ACR=$(az acr check-name -n $(ACR.Name) --query nameAvailable)
        echo "Create ACR: $CREATE_ACR"
        if [ $CREATE_ACR = true ]
        then
          CREATED_ACR=$(az acr create -n $(ACR.Name) -g $(Azure.ResourceGroupName) --sku $(ACR.Sku))
          echo "$CREATED_ACR"
        fi

- job: BuildImage
  displayName: Build
  dependsOn: CreateResources
  condition: or(succeeded(), ne(variables['Azure.CreateResources'], 'true'))

  pool:
    name: Hosted Ubuntu 1604

  steps:
  - task: Docker@1
    displayName: 'Build an image'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureContainerRegistry: '$(ACR.FullName)'
      imageName: '$(ACR.ImageName)'
      command: build
      dockerFile: '**/Dockerfile'

  - task: Docker@1
    displayName: 'Push an image'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureContainerRegistry: '$(ACR.FullName)'
      imageName: '$(ACR.ImageName)'
      command: push

- job: DeployApp
  displayName: Deploy
  dependsOn: BuildImage
  condition: succeeded()

  pool:
    name: Hosted Ubuntu 1604

  steps:
  - powershell: |
      $KubeDeploymentYamlExists = Test-Path $(AKS.KubeDeploymentYaml)
      Write-Host "##vso[task.setvariable variable=AKS.KubeDeploymentYamlExists;]$KubeDeploymentYamlExists"
    displayName: 'Check kubernetes deployment yaml exists'

  - powershell: |  
       $kubeDeploymentYaml = "apiVersion: apps/v1beta1
       kind: Deployment
       metadata:
         name: $(ACR.RepositoryName)
       spec:
         replicas: 1
         template:
           metadata:
             labels:
               app: $(ACR.RepositoryName)
           spec:
             containers:
             - name: $(ACR.RepositoryName)
               image: $(ACR.FullName)/$(ACR.ImageName)
               ports:
               - containerPort: $(AKS.DepoymentPort)
       ---
       apiVersion: v1
       kind: Service
       metadata:
         name: $(ACR.RepositoryName)
       spec:
         type: LoadBalancer
         ports:
         - port: $(AKS.DepoymentPort)
         selector:
           app: $(ACR.RepositoryName)"
       
       Set-Content -Path $(AKS.KubeDeploymentYaml) -Value $kubeDeploymentYaml 
    displayName: 'Generate kubernetes deployment yaml'
    condition: and(succeeded(), eq(variables['AKS.KubeDeploymentYamlExists'], 'False'))

  - task: Kubernetes@1
    displayName: 'kubectl apply'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureResourceGroup: '$(Azure.ResourceGroupName)'
      kubernetesCluster: '$(AKS.ClusterName)'
      arguments: '-f $(AKS.KubeDeploymentYaml)'
